'''

MIT License

Copyright (c) 2019 dpierce1274

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Data processing is the script used to process the data file generated by the main flight software. To conduct data
processing, simply initiate the script and select the data.txt file for processing in the dialog box that appears.

Source Author: Dillon Pierce
Name of File: Data Processing.py
File Location: https://github.com/dpierce1274/NPS-RocketBoard.git
Date Last Modified: 23 May 2019

Inputs: Data .txt File
Outputs: Various graphs and key flight performance parameters
'''

import matplotlib.pyplot as pyplot
from tkinter import Tk
from tkinter import filedialog


pyplot.rcParams['font.sans-serif'] = "Times New Roman"
pyplot.rcParams['font.family'] = "sans-serif"

Tk().withdraw()  # we don't want a full GUI, so keep the root window from appearing
filename = filedialog.askopenfilename()  # show an "Open" dialog box and return the path to the selected file
fp = open(filename, 'r')     # Open file in read mode

t = []
ACCx = []
ACCy = []
ACCz = []
accx = []
accy = []
accz = []
GRYx = []
GRYy = []
GRYz = []
MAGx = []
MAGy = []
MAGz = []
temp = []
pres = []
alt = []

fp.readline()

for line in fp.readlines():
    cols = line.split(',')
    if len(t) == 0:
        start_time = float(cols[1])

    t.append(float(cols[1])-start_time)
    ACCx.append(float(cols[2]))
    ACCy.append(float(cols[3]))
    ACCz.append(float(cols[4]))
    accx.append(float(cols[5]))
    accy.append(float(cols[6]))
    accz.append(float(cols[7]))
    GRYx.append(float(cols[8]))
    GRYy.append(float(cols[9]))
    GRYz.append(float(cols[10]))
    MAGx.append(float(cols[11]))
    MAGy.append(float(cols[12]))
    MAGz.append(float(cols[13]))
    temp.append(float(cols[14]))
    pres.append(float(cols[15]))
    alt_reading = cols[16]
    alt.append(float(alt_reading[:-2]))

# Find and Display Maximum Altitude

start_alt = alt[0]
max_alt = max(alt)
max_alt_ftAGL = (max_alt-start_alt)*3.28084
print('Maximum Altitude (AGL): %d feet' % max_alt_ftAGL)

# Plot Results

pyplot.subplot(131)
pyplot.title('IMU Acceleration vs. Time', fontsize=15, weight='bold')
pyplot.plot(t, ACCx, t, ACCy, t, ACCz, linewidth=1)
pyplot.xlabel('Time (s)')
pyplot.ylabel('Acceleration (Gs)')
pyplot.grid(b=None, which='major', axis='both')
axis_labels = ['X-Axis', 'Y-Axis', 'Z-Axis']
pyplot.legend(axis_labels)


pyplot.subplot(132)
pyplot.title('ADXL377 Acceleration vs. Time', fontsize=15, weight='bold')
pyplot.plot(t, accx, t, accy, t, accz, linewidth=1)
pyplot.xlabel('Time (s)')
pyplot.ylabel('Acceleration (Gs)')
pyplot.grid(b=None, which='major', axis='both')
axis_labels = ['X-Axis', 'Y-Axis', 'Z-Axis']
pyplot.legend(axis_labels)

pyplot.subplot(133)
pyplot.title('Rotation vs. Time', fontsize=15, weight='bold')
pyplot.plot(t, GRYx, t, GRYy, t, GRYz, linewidth=1)
pyplot.xlabel('Time (s)')
pyplot.ylabel('Rotation Rate (deg/s)')
pyplot.grid(b=None, which='major', axis='both')
axis_labels = ['X-Axis', 'Y-Axis', 'Z-Axis']
pyplot.legend(axis_labels)

pyplot.figure(2)
pyplot.subplot(121)
pyplot.title('Altitude vs. Time', fontsize=15, weight='bold')
pyplot.grid(b=None, which='major', axis='both')
pyplot.plot(t, alt)
pyplot.xlabel('Time (s)')
pyplot.ylabel('Altitude (m)')


pyplot.subplot(122)
pyplot.title('Temperature vs. Time', fontsize=15, weight='bold')
pyplot.plot(t, temp)
pyplot.xlabel('Time (s)')
pyplot.ylabel('Temperature (deg C)')
pyplot.show()
